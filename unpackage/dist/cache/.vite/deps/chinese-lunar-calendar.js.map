{
  "version": 3,
  "sources": ["../../../../../node_modules/chinese-lunar-calendar/src/utils.js", "../../../../../node_modules/chinese-lunar-calendar/src/solar_term.js", "../../../../../node_modules/chinese-lunar-calendar/src/lunar_calendar.js"],
  "sourcesContent": ["function base64ToBit(base64Str) {\n    const base64CodeMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    const result = [];\n    for (let i = 0; i < base64Str.length; i++) {\n        let n = base64CodeMap.indexOf(base64Str[i]);\n        result.push(n.toString(2).padStart(6, '0'));\n    }\n    return result.join('');\n}\n\nfunction checkDate(year, month, date) {\n    if (year < 1901 || year > 2100) {\n        throw new Error('Invalid Year');\n    }\n    if (month < 1 || month > 12) {\n        throw new Error('Invalid Month');\n    }\n    if (date < 1 || date > 31) {\n        throw new Error('Invalid Date');\n    }\n    if ([4, 6, 9, 11].indexOf(month) != -1 && date > 30) {\n        throw new Error('Invalid Date');\n    }\n    if (month == 2) {\n        if (date > 29) {\n            throw new Error('Invalid Date');\n        } else {\n            let isLeap = false;\n            if (year % 400 == 0) {\n                isLeap = true\n            } else if (year % 4 == 0 && year % 100 != 0) {\n                isLeap = true;\n            }\n            if (!isLeap && date > 28) {\n                throw new Error('Invalid Date');\n            }\n        }\n    }\n}\n\nmodule.exports = {\n    base64ToBit,\n    checkDate,\n};", "const { base64ToBit, checkDate } =  require('./utils');\n\n// 2bit代表日期 共48bit\n// 48bit -> base64  8个\n// 200年一共68种情况\nconst names = ['小寒', '大寒', '立春', '雨水', '惊蛰', '春分', '清明', '谷雨', '立夏', '小满', '芒种',\n    '夏至', '小暑', '大暑', '立秋', '处暑', '白露', '秋分', '寒露', '霜降', '立冬', '小雪', '大雪', '冬至'];\nconst baseDate = [4, 19, 3, 18, 4, 19, 4, 19, 4, 20, 4, 20, 6, 22, 6, 22, 6, 22, 7, 22, 6, 21, 6, 21];\n\nconst table = [];\n\nfunction decompressData() {\n    const codeStr = 'ABCDAECDAECDFGHIJKHILKMILABNOABNOAENOAENOAEPQRGSTUGSTLAVTOAWXOAWXOAYXOAYZOabcdebcQUfgThijkOilXOimXOimXOimcOnocdpqcQrsgktujkvumXvumXvumcvumcvwocxyqcz0sj10s213u243um43um53wm56wq567q589s+/0s~/3u~!3u@#3um';\n    const groupsStr = 'paaqmqqpqaquqqqqqvruruqq6qWaWZqlqaqqqqqqlaaqmqqppaaqqqqqqrququqqqqWaWZaVlaaampqlpaaqqqqplaWampqlqaququqqqqWZWZVVlaWaWZqlqqVZWZVVlaWaWZaVlaaqmpqpqmVZVZVVVaWaWZaVlaWampqpqlVZVZVVqVVZVVVVVaWZWZVVqVVVVVVVVaVZWZVVpaaqmpqpqVFVVVVVVaVZVZVVlaWaWZalpaaampqppVFVRVVVVWVZVZVVlaWaWpqlpVFVRVVUVVVZVVVVVaWZWZaVVFVZVVVVVFVVVVVVpVFVRUVUVFFVVVVVpVFFRUVUVFFVRVVVlVBFRUVUUFFVRVVVlVBFBEVUUFFVRVVUlVBFBEVQUFFFRUVUlVBFBEFQUFBFRUVUlVBEBEFAQFBFBEVUVVBEBEFAVVVVVVVVQFBFBEVQVVBEBEAAVVAEAEAAQFBFBEFQUFBFBUVUQFBEBEFAUFBFBEVUVQAEAAAAAFBEBEFAVQAAAAAAAFBEBEAAVAAAAAAAAFBEAEAA';\n    const groups = [];\n    for (let i = 0; i < groupsStr.length; i += 8) {\n        const groupBitStr = base64ToBit(groupsStr.substr(i, 8));\n        const group = [];\n        for (let j = 0; j < groupBitStr.length; j += 2) {\n            group.push(+`0b${groupBitStr.substr(j, 2)}`);\n        }\n        groups.push(group);\n    }\n    const codeMapStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/~!@#';\n    for (let i = 0; i < codeStr.length; i++) {\n        table.push(groups[codeMapStr.indexOf(codeStr[i])]);\n    }\n}\n\ndecompressData();\n\nfunction getSolarTerm(year, month, date) {\n    year = Math.floor(+year);\n    month = Math.floor(+month);\n    date = Math.floor(+date);\n    checkDate(year, month, date);\n    const index = (month - 1) * 2 + (date < 15 ? 0 : 1);\n    const d = baseDate[index] + table[year - 1901][index];\n    if (date == d) {\n        return names[index];\n    } else {\n        return null;\n    }\n}\n\nmodule.exports = { getSolarTerm };\n", "const { base64ToBit, checkDate } = require('./utils');\nconst { getSolarTerm } = require('./solar_term');\n\nconst table = [];\nconst heavenlyStemStr = '甲乙丙丁戊己庚辛壬癸';\nconst earthlyBranchStr = '子丑寅卯辰巳午未申酉戌亥';\nconst zodiacStr = '鼠牛虎兔龙蛇马羊猴鸡狗猪';\nconst lunarMonthStr = '正二三四五六七八九十冬腊';\nconst nubmerStr = '一二三四五六七八九十';\n\nfunction decompressData() {\n    const base64Str = 'hLaCVwUrqpNDSYNlUaqgrUE1pJXQSuak2FJoaSrqlC1QNailtBK26TcElwpLWyWDUoNqJW1ArYJVySXgkuzJYNSg6lVtSC1oFbHJuCS58loZKhqU20oLVQVqSq2BLoSWlkrCpV7SoNlBaqqrUE2gpbNSuClcVKg6VBqpq1QVaglslK4KVwUmPpMGyrrVQVqCW1UroJWhSamk0NJY1ShaoFtTS2glbBJtKS4Ul1ZLBqUG1GraBVsEq6pLwSXBks2pQdSw1lBawKtlk2hJcGSyalQ1KDaUlqoK1PVbAl0JLVyVhUqFpSWqgrVlVqCXQUtspXBSsKk0dKg1UFapJtQS2alcFJwaTL0mDVMFqja1BLbaV0ErQpNbSWGkoapLtUC1oFbSStgk29JcKSwqlW1KDaQVtGq2CTeEl4JLgyWzUoOpQaqSrYFVwSXHkuDJZ9SoalBtKq1UFagptRS6ClsVKwqVC0prVQVqgq0lLoKWwUrOpODSbuUwaqCtVU2oJbBSuik4NFo6TBqkG1TNagVtBK5KToUWhoqWyUNUg';\n    const bitStr = base64ToBit(base64Str);\n    let solarDate = { y: 1900, m: 1, d: 31, obj: new Date(1900, 0, 31, 0, 0, 0, 0) };\n    let heavenlyStem = 6; // 天干\n    let earthlyBranch = 0; // 地支\n    for (let i = 0; i < bitStr.length; ) {\n        if (i + 16 >= bitStr.length) {\n            break;\n        }\n        const head = bitStr.substr(i, 4);\n        i += 4;\n        const leapMonth = +`0b${head}`;\n        const monthCount = leapMonth > 0 ? 13 : 12;\n        const months = bitStr.substr(i, monthCount).split('').map(o => +o);\n        i += monthCount;\n\n        table.push({\n            solarDate,\n            leapMonth,\n            months,\n            heavenlyStem,\n            earthlyBranch\n        });\n\n        const dateCount = monthCount*29 + months.filter(o => o == 1).length;\n        const newSolarDate = new Date(solarDate.y, solarDate.m - 1, solarDate.d + dateCount, 0, 0, 0, 0);\n        solarDate = {\n            y: newSolarDate.getFullYear(),\n            m: newSolarDate.getMonth() + 1,\n            d: newSolarDate.getDate(),\n            obj: newSolarDate\n        };\n        heavenlyStem = (heavenlyStem + 1) % 10;\n        earthlyBranch = (earthlyBranch + 1) % 12;\n    }\n}\n\ndecompressData();\n\nfunction isBefore(base, target) {\n    if (base.y != target.y) {\n        return base.y > target.y;\n    } else if (base.m != target.m) {\n        return base.m > target.m;\n    } else if (base.d != target.d) {\n        return base.d > target.d;\n    }\n    return false;\n}\n\nfunction getLunarStr(month, date, isLeap) {\n    const monthStr = `${isLeap ? '闰' : ''}${lunarMonthStr[month - 1]}月`;\n    if (date <= 10) {\n        return `${monthStr}初${nubmerStr[date - 1]}`;\n    } else if (date < 20) {\n        return `${monthStr}十${nubmerStr[date - 11]}`;\n    } else if (date == 20) {\n        return `${monthStr}廿十`;\n    } else if (date > 20) {\n        return `${monthStr}廿${nubmerStr[date - 21]}`;\n    } else {\n        return `${monthStr}三十`;\n    }\n}\n\nfunction getLunar(year, month, date) {\n    year = Math.floor(+year);\n    month = Math.floor(+month);\n    date = Math.floor(+date);\n    checkDate(year, month, date);\n    let index = year - 1900;\n    let row = table[index];\n    if (isBefore(row.solarDate, { y: year, m: month, d: date })) {\n        index -= 1;\n        row = table[index];\n    }\n    if (!row) {\n        throw new Error('Invalid Date');\n    }\n    const targetDate = new Date(year, month - 1, date, 0, 0, 0, 0);\n    let delta = Math.round((targetDate.getTime() - row.solarDate.obj.getTime()) / (24*60*60*1000));\n    let afterLeap = false;\n    for(let i = 0; i < row.months.length; i++) {\n        const isLeap = row.leapMonth > 0 && i == row.leapMonth;\n        if (isLeap) {\n            afterLeap = true;\n        }\n        const days = 29 + row.months[i];\n        if (delta < days) {\n            let lunarMonth = afterLeap ? i : i + 1;\n            return {\n                lunarMonth,\n                lunarDate: delta + 1,\n                isLeap,\n                solarTerm: getSolarTerm(year, month, date),\n                lunarYear: `${heavenlyStemStr[row.heavenlyStem]}${earthlyBranchStr[row.earthlyBranch]}年`,\n                zodiac: `${zodiacStr[row.earthlyBranch]}`,\n                dateStr: getLunarStr(lunarMonth, delta + 1, isLeap)\n            };\n        } else {\n            delta -= days;\n        }\n    }\n    throw new Error(`There's something wrong!`);\n}\n\nmodule.exports = { getLunar };\n"],
  "mappings": "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",
  "names": []
}
